[{"/Users/ben/transit-deprivation-v2/src/reportWebVitals.js":"1","/Users/ben/transit-deprivation-v2/src/components/App.js":"2","/Users/ben/transit-deprivation-v2/src/index.js":"3","/Users/ben/transit-deprivation-v2/src/store/initialState.js":"4","/Users/ben/transit-deprivation-v2/src/store/actionTypes.js":"5","/Users/ben/transit-deprivation-v2/src/store/reducer.js":"6","/Users/ben/transit-deprivation-v2/src/store/index.js":"7","/Users/ben/transit-deprivation-v2/src/store/actions.js":"8","/Users/ben/transit-deprivation-v2/src/components/DatasetSelector.js":"9","/Users/ben/transit-deprivation-v2/src/components/TimeLimitSlider.js":"10","/Users/ben/transit-deprivation-v2/src/components/MapLegend.js":"11","/Users/ben/transit-deprivation-v2/src/components/OpacitySlider.js":"12","/Users/ben/transit-deprivation-v2/src/components/TravelTimePlot.js":"13","/Users/ben/transit-deprivation-v2/src/utils/ColorScheme.js":"14","/Users/ben/transit-deprivation-v2/src/components/Map.js":"15","/Users/ben/transit-deprivation-v2/src/components/MapTooltip.js":"16","/Users/ben/transit-deprivation-v2/src/components/MapColorSchemeSelector.js":"17"},{"size":362,"mtime":1608158312019,"results":"18","hashOfConfig":"19"},{"size":4458,"mtime":1608260163892,"results":"20","hashOfConfig":"19"},{"size":671,"mtime":1608162519333,"results":"21","hashOfConfig":"19"},{"size":1212,"mtime":1608263288598,"results":"22","hashOfConfig":"19"},{"size":667,"mtime":1608257037013,"results":"23","hashOfConfig":"19"},{"size":2129,"mtime":1608257037006,"results":"24","hashOfConfig":"19"},{"size":289,"mtime":1608260645211,"results":"25","hashOfConfig":"19"},{"size":4478,"mtime":1608283003317,"results":"26","hashOfConfig":"19"},{"size":3610,"mtime":1608283075827,"results":"27","hashOfConfig":"19"},{"size":1707,"mtime":1608166287615,"results":"28","hashOfConfig":"19"},{"size":5203,"mtime":1608268689364,"results":"29","hashOfConfig":"19"},{"size":1596,"mtime":1608166818259,"results":"30","hashOfConfig":"19"},{"size":3762,"mtime":1608268897291,"results":"31","hashOfConfig":"19"},{"size":469,"mtime":1608168410312,"results":"32","hashOfConfig":"19"},{"size":9352,"mtime":1608282604837,"results":"33","hashOfConfig":"19"},{"size":3453,"mtime":1608267992346,"results":"34","hashOfConfig":"19"},{"size":1741,"mtime":1608283183984,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wovqli",{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ben/transit-deprivation-v2/src/reportWebVitals.js",[],["84","85"],"/Users/ben/transit-deprivation-v2/src/components/App.js",["86","87","88","89"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles, createMuiTheme} from '@material-ui/core/styles';\nimport { Paper, Grid, Typography } from '@material-ui/core';\nimport DatasetSelector from \"./DatasetSelector\";\nimport TimeLimitSlider from \"./TimeLimitSlider\";\nimport OpacitySlider from \"./OpacitySlider\";\nimport Map from \"./Map\";\nimport MapColorSchemeSelector from \"./MapColorSchemeSelector\";\nimport TravelTimePlot from \"./TravelTimePlot\";\nimport ContainerDimensions from 'react-container-dimensions';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    },\n});\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        //background: grey[900],\n        // background: \"black\",\n        marginTop: theme.spacing(2),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        background: theme.palette.background.paper\n    },\n    map: {\n        minHeight: \"550px\",\n    },\n});\n\nclass App extends Component {\n\n    render() {\n        const { classes, destinationDataset, etaView, timeLimit, mapOpacity } = this.props;\n        return (\n            <Grid className={classes.root} container spacing={3} justify=\"center\" alignItems=\"flex-start\">\n                <Grid item container direction=\"column\" xs={4} spacing={3}>\n                    <Grid item>\n                        <Paper className={classes.paper}>\n                            <Typography variant=\"h4\" gutterBottom>\n                                Transit & Deprivation\n                            </Typography>\n                            <Typography paragraph style={{whiteSpace: 'pre-line'}}>\n                                {\"This tool will visualise the travel time between origins and destinations in the Auckland Region when using public transport. \\n\\n\" +\n                                \"Click on the map to view the travel time from there to the rest of Auckland. To clear the map, select an empty location, such as the ocean. \\n\\n\" +\n                                \"You can visualise how accessibility changes with the amount of time available by using the time limit slider in the control settings below.\"\n                                }\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid item>\n                        <Paper className={classes.paper}>\n                            <DatasetSelector />\n                        </Paper>\n                    </Grid>\n                    <Grid item>\n                        <Paper className={classes.paper}>\n                            <Typography variant=\"h5\" gutterBottom>Controls</Typography>\n                            <TimeLimitSlider />\n                            <OpacitySlider />\n                            <MapColorSchemeSelector />\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Grid container item direction=\"column\" xs={8} spacing={3}>\n                    <Grid item>\n                        <Paper className={classes.paper}>\n                            <ContainerDimensions className={classes.map}>\n                                <Map />\n                            </ContainerDimensions>\n                        </Paper>\n                    </Grid>\n                    <Grid item>\n                        <Paper className={classes.paper}>\n                            <TravelTimePlot />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        etaView: state.etaView,\n        destinationDataset: state.destinationDataset,\n        timeLimit: state.timeLimit,\n        mapOpacity: state.mapOpacity,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n\n    });\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, {defaultTheme: theme})(App));\n\n/*}\n            <div>\n                <div>{etaView+\",\"+destinationDataset+\",\"+timeLimit+\",\"+mapOpacity}</div>\n                <DatasetSelector />\n                <TimeLimitSlider />\n                <OpacitySlider />\n                <MapLegend />\n                <TravelTimePlot />\n                <ContainerDimensions className={classes.map}>\n                    <Map />\n                </ContainerDimensions>\n            </div>\n            */",["90","91"],"/Users/ben/transit-deprivation-v2/src/index.js",[],["92","93"],"/Users/ben/transit-deprivation-v2/src/store/initialState.js",["94"],"// Data\nimport * as data_zones from \"./data/akl/akl_polygons_id.json\"\nimport * as clinics from \"./data/akl/akl_clinics.json\"\nimport * as akl_idx_loc from \"./data/akl/akl_idx_loc.json\"\nimport * as akl_loc_idx from \"./data/akl/akl_loc_idx.json\"\nimport * as akl_idx_t from \"./data/akl/akl_idx_t.json\"\n\nexport default {\n    // geojson data\n    dataZones: data_zones[\"default\"],\n    clinics: clinics[\"default\"],\n\n    // filter/selection values\n    destinationDataset: \"None\",\n    etaView: \"avail\",\n    timeLimit: 60,\n\n    // map state\n    // TODO: we might need more descriptive names if we add additional layers/second map\n    mapColorScheme: \"BlueGreen\",\n    mapHoveredObject: null,\n    mapOpacity: 0.8,\n    mapMinValue: 0.0,\n    mapMaxValue: 1.0,\n    mapViewState: {\n        latitude: -36.8485, // auckland\n        longitude: 174.7633,\n        zoom: 11,\n        maxZoom: 16,\n        pitch: 0,\n        bearing: 0\n    },\n    mapTooltip: {\n        showHover: false,\n    },\n    selectedDataZone: null,\n\n    // indexes\n    idxLoc: akl_idx_loc[\"default\"],\n    locIdx: akl_loc_idx[\"default\"],\n    idxT: akl_idx_t[\"default\"],\n\n    // data, derived data from server\n    locationDT: null,\n    eta: null,\n    valid: false,\n}\n","/Users/ben/transit-deprivation-v2/src/store/actionTypes.js",[],"/Users/ben/transit-deprivation-v2/src/store/reducer.js",[],"/Users/ben/transit-deprivation-v2/src/store/index.js",[],"/Users/ben/transit-deprivation-v2/src/store/actions.js",[],"/Users/ben/transit-deprivation-v2/src/components/DatasetSelector.js",[],"/Users/ben/transit-deprivation-v2/src/components/TimeLimitSlider.js",["95","96","97","98","99"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, withStyles, createMuiTheme} from '@material-ui/core/styles';\nimport {Paper, Grid, Slider, Select, MenuItem, Typography} from '@material-ui/core';\nimport { setTimeLimit } from \"../store/actions\";\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    },\n});\n\nconst styles = (theme) => ({\n    timeLimitSlider: {\n        maxWidth: \"300px\"\n    },\n});\n\nclass TimeLimitSlider extends Component {\n\n    handleTimeLimitChange = (event, value) => {\n        const { setTimeLimit } = this.props;\n        setTimeLimit(value);\n    }\n\n    render() {\n        const { classes, timeLimit } = this.props;\n\n        return (\n            <div>\n                <Typography gutterBottom style={{paddingTop:10}}>\n                    Time Limit: {timeLimit} minutes\n                </Typography>\n                <Slider\n                    className={classes.timeLimitSlider}\n                    defaultValue={60}\n                    onChange={this.handleTimeLimitChange}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={10}\n                    marks\n                    min={10}\n                    max={300}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timeLimit: state.timeLimit,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n        setTimeLimit: (timeLimit) => { dispatch(setTimeLimit(timeLimit)) },\n    });\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, {defaultTheme: theme})(TimeLimitSlider));",["100","101"],"/Users/ben/transit-deprivation-v2/src/components/MapLegend.js",["102"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport { mapColorSchemeNameToInterpolator } from \"../utils/ColorScheme\";\nimport { scaleSequential, scaleLinear } from \"d3\";\n// color helpers\nvar tinycolor = require(\"tinycolor2\");\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    },\n});\n\nconst styles = (theme) => ({\n    mapLegend: {\n        x: 0,\n        y: 0,\n        width: \"320px\",\n        color: theme.palette.text.secondary,\n        background: theme.palette.background.paper,\n        padding: theme.spacing(2)\n\n    },\n    colorBarTicks: {\n        color: theme.palette.text.secondary,\n        fontFamily: \"Roboto\",\n        fontSize: \"10px\",\n        textAnchor: \"middle\",\n    },\n    colorBarLabel: {\n        color: theme.palette.text.secondary,\n        fontFamily: \"Roboto\",\n        fontSize: \"14px\",\n        textAnchor: \"middle\",\n    },\n});\n\nclass MapLegend extends Component {\n\n    label = () => {\n        const { etaView } = this.props;\n        let l = \"\";\n        switch (etaView){\n            case \"mean\":\n                l = \"Mean Travel Time (minutes)\"\n                break;\n            case \"stdev\":\n                l = \"Standard Deviation in Travel Time (minutes)\"\n                break;\n            case \"avail\":\n                l = \"Availability (%)\"\n                break;\n        }\n        return l;\n    }\n\n    render() {\n        const { classes, minValue, maxValue, etaView, colorScheme, opacity } = this.props;\n        let width = 300;\n        let height = 8;\n        let xpad = 5;\n\n        let vmin = minValue;\n        let vmax = maxValue;\n        if (etaView === \"avail\") {\n            vmin = minValue * 100;\n            vmax = maxValue * 100;\n        }\n\n        let mapColorSchemeInterpolator = mapColorSchemeNameToInterpolator(colorScheme);\n        let colorScale = scaleSequential([0, 1], mapColorSchemeInterpolator);\n        let tickScale = scaleLinear().domain([0, 1]).range([vmin, vmax]);\n        let tickValues = tickScale.ticks().map(value => Math.round(tickScale(value)));\n        let tickOffset = width / (tickValues.length - 1);\n\n        return (\n            <Paper\n                id={\"map-legend\"}\n                className={classes.mapLegend}\n            >\n                <svg id=\"map-legend\" width=\"320\" height=\"60\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <defs>\n                        <linearGradient id=\"Gradient\">\n                            {\n                                tickScale.ticks().map((value, index) => (\n                                    // console.log(`${index} ${value} ${colorScale(value)}`)\n                                    <stop key={`stop-${index}`} offset={`${value*100}%`} stopColor={tinycolor(colorScale(value)).setAlpha(opacity)}/>\n                                ))\n\n                            }\n                        </linearGradient>\n                    </defs>\n                    <rect\n                        x={xpad}\n                        y=\"0\"\n                        width={width}\n                        height={height}\n                        stroke=\"transparent\"\n                        strokeWidth=\"1\"\n                        fill=\"url(#Gradient)\"\n                    />\n                    {\n                        tickValues.map((value, index) => (\n                            // console.log(`${value} ${index} ${index * tickOffset}`)\n                            <g\n                                key={`tick-${index}`}\n                                transform={`translate(${xpad + index * tickOffset}, 0)`}\n                            >\n                                <text\n                                    id=\"map-legend\"\n                                    key={`tickValue-${index}`}\n                                    className={classes.colorBarTicks}\n                                    fill={\"currentColor\"}\n                                    style={{transform: `translateY(${height + 20}px)`}}>\n                                    { value }\n                                </text>\n                            </g>\n                        ))\n                    }\n                    <g\n                        key={\"label\"}\n                        transform={`translate(${xpad + width/2}, ${height + 50})`}\n                    >\n                        <text\n                            id=\"map-legend\"\n                            key={\"label\"}\n                            className={classes.colorBarLabel}\n                            fill={\"currentColor\"}\n                        >{this.label}</text>\n                    </g>\n                </svg>\n            </Paper>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        minValue: state.mapMinValue,\n        maxValue: state.mapMaxValue,\n        colorScheme: state.mapColorScheme,\n        opacity: state.mapOpacity,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n    });\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, {defaultTheme: theme})(MapLegend));\n\n",["103","104"],"/Users/ben/transit-deprivation-v2/src/components/OpacitySlider.js",["105","106","107","108","109"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, withStyles, createMuiTheme} from '@material-ui/core/styles';\nimport {Paper, Grid, Slider, Select, MenuItem, Typography} from '@material-ui/core';\nimport { setMapOpacity } from \"../store/actions\";\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    },\n});\n\nconst styles = (theme) => ({\n    mapOpacitySlider: {\n        maxWidth: \"300px\"\n    },\n});\n\nclass OpacitySlider extends Component {\n\n    handleOpacityChange = (event, value) => {\n        const { setMapOpacity } = this.props;\n        setMapOpacity(value);\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Typography gutterBottom>\n                    Opacity\n                </Typography>\n                <Slider\n                    className={classes.mapOpacitySlider}\n                    defaultValue={0.8}\n                    onChange={this.handleOpacityChange}\n                    aria-labelledby=\"continuous-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={0.01}\n                    min={0.0}\n                    max={1.0}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\n    }\n\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n        setMapOpacity: (mapOpacity) => { dispatch(setMapOpacity(mapOpacity)) },\n    });\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, {defaultTheme: theme})(OpacitySlider));\n","/Users/ben/transit-deprivation-v2/src/components/TravelTimePlot.js",["110"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\n// timeseries\nimport { TimeSeries } from \"pondjs\";\nimport {\n    Charts,\n    ChartContainer,\n    ChartRow,\n    YAxis,\n    LineChart,\n    Resizable\n} from \"react-timeseries-charts\";\nimport {timeFormat} from 'd3-time-format';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    },\n});\n\nconst styles = (theme) => ({\n});\n\nclass TravelTimePlot extends Component {\n    render() {\n        const { data, query, locIdx, idxT, fullEta, valid, etaView} = this.props;\n        const eta = (valid && fullEta) ? fullEta[etaView][\"values\"] : null;\n\n        let points = [[0, 0]];\n        if (eta != null && typeof query !== 'undefined' && query.id in eta){\n\n            let idx = locIdx[query.id];\n            let times = data[idx];\n            points = Object.keys(times).map((key) => [idxT[key], times[key]]); // timestamps should be ms\n            // console.log(points);\n\n            // console.log(points)\n        }\n\n        const series = new TimeSeries({\n            name: \"Travel Time\",\n            columns: [\"time\", \"value\"],\n            points: points,\n            // tz: \"Pacific/Auckland\"\n        });\n\n        let min = series.min();\n        let max = series.max();\n        min = Math.max(0, min - min * 0.1);\n        max *= 1.1;\n\n        // https://software.es.net/react-timeseries-charts/#/api/charts/YAxis\n        return (\n            <Resizable>\n                <ChartContainer\n                    title=\"Travel Time\"\n                    titleStyle={{ fill: \"#555\", fontWeight: 400, fontFamily: \"Roboto\" }}\n                    timeRange={series.range()}\n                    format=\"%H:%M %p\"\n                    //format={timeFormat(\"%H:%M %p\")}\n                    timeAxisTickCount={10}\n                    timeAxisStyle={{\n                        axis:{fontFamily: \"Roboto\", fontSize: 12},\n                        ticks: {\"font-family\": \"Roboto\", \"font-size\": \"12\"},\n                        values: {\"font-family\": \"Roboto\", \"font-size\": \"12\"},\n                    }}\n                    utc={true}\n                    transition={0}\n                >\n                    <ChartRow height=\"170\">\n                        <YAxis\n                            id=\"duration\"\n                            label=\"Minutes\"\n                            min={min}\n                            max={max}\n                            width=\"60\"\n                            style={{\n                                label: {\"font-family\": \"Roboto\", \"font-size\": \"14\"},\n                                axis: {\"font-family\": \"Roboto\", \"font-size\": \"12\"},\n                                ticks: {\"font-family\": \"Roboto\", \"font-size\": \"12\"},\n                                values: {\"font-family\": \"Roboto\", \"font-size\": \"12\"},\n                            }}\n                        />\n                        <Charts>\n                            <LineChart\n                                axis=\"duration\"\n                                series={series}\n                            />\n                        </Charts>\n                    </ChartRow>\n                </ChartContainer>\n            </Resizable>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        data: state.locationDT,\n        query: state.mapTooltip.hoveredObject,\n        locIdx: state.locIdx,\n        idxT: state.idxT,\n        valid: state.valid,\n        fullEta: state.eta,\n        etaView: state.etaView,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n    });\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles, {defaultTheme: theme})(TravelTimePlot));\n",["111","112"],"/Users/ben/transit-deprivation-v2/src/utils/ColorScheme.js",["113"],"import {interpolateViridis, interpolateTurbo, interpolateBuGn} from 'd3-scale-chromatic';\n\nexport function mapColorSchemeNameToInterpolator(name) {\n    let interp = () => {};\n    switch (name) {\n        case \"BlueGreen\":\n            interp = interpolateBuGn;\n            break;\n        case \"Viridis\":\n            interp = interpolateViridis;\n            break;\n        case \"Turbo\":\n            interp = interpolateTurbo;\n            break;\n    }\n    return(interp);\n}",["114","115"],"/Users/ben/transit-deprivation-v2/src/components/Map.js",["116","117","118","119","120","121"],"/Users/ben/transit-deprivation-v2/src/components/MapTooltip.js",[],"/Users/ben/transit-deprivation-v2/src/components/MapColorSchemeSelector.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":39,"column":26,"nodeType":"128","messageId":"129","endLine":39,"endColumn":44},{"ruleId":"126","severity":1,"message":"130","line":39,"column":46,"nodeType":"128","messageId":"129","endLine":39,"endColumn":53},{"ruleId":"126","severity":1,"message":"131","line":39,"column":55,"nodeType":"128","messageId":"129","endLine":39,"endColumn":64},{"ruleId":"126","severity":1,"message":"132","line":39,"column":66,"nodeType":"128","messageId":"129","endLine":39,"endColumn":76},{"ruleId":"122","replacedBy":"133"},{"ruleId":"124","replacedBy":"134"},{"ruleId":"122","replacedBy":"135"},{"ruleId":"124","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":8,"column":1,"nodeType":"139","endLine":47,"endColumn":2},{"ruleId":"126","severity":1,"message":"140","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":20},{"ruleId":"126","severity":1,"message":"141","line":4,"column":9,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"142","line":4,"column":16,"nodeType":"128","messageId":"129","endLine":4,"endColumn":20},{"ruleId":"126","severity":1,"message":"143","line":4,"column":30,"nodeType":"128","messageId":"129","endLine":4,"endColumn":36},{"ruleId":"126","severity":1,"message":"144","line":4,"column":38,"nodeType":"128","messageId":"129","endLine":4,"endColumn":46},{"ruleId":"122","replacedBy":"145"},{"ruleId":"124","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":45,"column":9,"nodeType":"149","messageId":"150","endLine":55,"endColumn":10},{"ruleId":"122","replacedBy":"151"},{"ruleId":"124","replacedBy":"152"},{"ruleId":"126","severity":1,"message":"140","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":20},{"ruleId":"126","severity":1,"message":"141","line":4,"column":9,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"142","line":4,"column":16,"nodeType":"128","messageId":"129","endLine":4,"endColumn":20},{"ruleId":"126","severity":1,"message":"143","line":4,"column":30,"nodeType":"128","messageId":"129","endLine":4,"endColumn":36},{"ruleId":"126","severity":1,"message":"144","line":4,"column":38,"nodeType":"128","messageId":"129","endLine":4,"endColumn":46},{"ruleId":"126","severity":1,"message":"153","line":14,"column":9,"nodeType":"128","messageId":"129","endLine":14,"endColumn":19},{"ruleId":"122","replacedBy":"154"},{"ruleId":"124","replacedBy":"155"},{"ruleId":"147","severity":1,"message":"148","line":5,"column":5,"nodeType":"149","messageId":"150","endLine":15,"endColumn":6},{"ruleId":"122","replacedBy":"156"},{"ruleId":"124","replacedBy":"157"},{"ruleId":"126","severity":1,"message":"158","line":13,"column":23,"nodeType":"128","messageId":"129","endLine":13,"endColumn":39},{"ruleId":"126","severity":1,"message":"159","line":16,"column":16,"nodeType":"128","messageId":"129","endLine":16,"endColumn":31},{"ruleId":"126","severity":1,"message":"160","line":16,"column":33,"nodeType":"128","messageId":"129","endLine":16,"endColumn":44},{"ruleId":"126","severity":1,"message":"161","line":104,"column":44,"nodeType":"128","messageId":"129","endLine":104,"endColumn":49},{"ruleId":"126","severity":1,"message":"162","line":185,"column":22,"nodeType":"128","messageId":"129","endLine":185,"endColumn":29},{"ruleId":"126","severity":1,"message":"163","line":185,"column":55,"nodeType":"128","messageId":"129","endLine":185,"endColumn":73},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'destinationDataset' is assigned a value but never used.","Identifier","unusedVar","'etaView' is assigned a value but never used.","'timeLimit' is assigned a value but never used.","'mapOpacity' is assigned a value but never used.",["164"],["165"],["164"],["165"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'makeStyles' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.",["164"],["165"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["164"],["165"],"'timeFormat' is defined but never used.",["164"],["165"],["164"],["165"],"'ScatterplotLayer' is defined but never used.","'scaleSequential' is defined but never used.","'scaleLinear' is defined but never used.","'valid' is assigned a value but never used.","'clinics' is assigned a value but never used.","'destinationOverlay' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]